{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\nexport const CodeExecutorService = {\n  async executeCode(code, language, input = '') {\n    try {\n      const response = await axios.post(`${API_URL}/api/execute`, {\n        code,\n        language,\n        input\n      });\n      return response.data;\n    } catch (error) {\n      toast.error('Code execution failed');\n      console.error('Code execution error:', error);\n      throw error;\n    }\n  },\n  async runTestCases(code, language, testCases) {\n    try {\n      const testResults = await Promise.all(testCases.map(async testCase => {\n        const result = await this.executeCode(code, language, testCase.input);\n        return {\n          testCase,\n          passed: result.output.trim() === testCase.output.trim(),\n          output: result.output\n        };\n      }));\n      return testResults;\n    } catch (error) {\n      toast.error('Test case execution failed');\n      console.error('Test case execution error:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","toast","API_URL","process","env","REACT_APP_BACKEND_URL","CodeExecutorService","executeCode","code","language","input","response","post","data","error","console","runTestCases","testCases","testResults","Promise","all","map","testCase","result","passed","output","trim"],"sources":["D:/React/CodeClash/codeclash-frontend/codeclash-frontend/src/services/CodeExecutorService.js"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst API_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080';\n\nexport const CodeExecutorService = {\n  async executeCode(code, language, input = '') {\n    try {\n      const response = await axios.post(`${API_URL}/api/execute`, {\n        code,\n        language,\n        input\n      });\n      return response.data;\n    } catch (error) {\n      toast.error('Code execution failed');\n      console.error('Code execution error:', error);\n      throw error;\n    }\n  },\n\n  async runTestCases(code, language, testCases) {\n    try {\n      const testResults = await Promise.all(\n        testCases.map(async (testCase) => {\n          const result = await this.executeCode(code, language, testCase.input);\n          return {\n            testCase,\n            passed: result.output.trim() === testCase.output.trim(),\n            output: result.output\n          };\n        })\n      );\n      return testResults;\n    } catch (error) {\n      toast.error('Test case execution failed');\n      console.error('Test case execution error:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,uBAAuB;AAE5E,OAAO,MAAMC,mBAAmB,GAAG;EACjC,MAAMC,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,GAAG,EAAE,EAAE;IAC5C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,GAAGV,OAAO,cAAc,EAAE;QAC1DM,IAAI;QACJC,QAAQ;QACRC;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,KAAK,CAACa,KAAK,CAAC,uBAAuB,CAAC;MACpCC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAME,YAAYA,CAACR,IAAI,EAAEC,QAAQ,EAAEQ,SAAS,EAAE;IAC5C,IAAI;MACF,MAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAG,CACnCH,SAAS,CAACI,GAAG,CAAC,MAAOC,QAAQ,IAAK;QAChC,MAAMC,MAAM,GAAG,MAAM,IAAI,CAAChB,WAAW,CAACC,IAAI,EAAEC,QAAQ,EAAEa,QAAQ,CAACZ,KAAK,CAAC;QACrE,OAAO;UACLY,QAAQ;UACRE,MAAM,EAAED,MAAM,CAACE,MAAM,CAACC,IAAI,CAAC,CAAC,KAAKJ,QAAQ,CAACG,MAAM,CAACC,IAAI,CAAC,CAAC;UACvDD,MAAM,EAAEF,MAAM,CAACE;QACjB,CAAC;MACH,CAAC,CACH,CAAC;MACD,OAAOP,WAAW;IACpB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdb,KAAK,CAACa,KAAK,CAAC,4BAA4B,CAAC;MACzCC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}