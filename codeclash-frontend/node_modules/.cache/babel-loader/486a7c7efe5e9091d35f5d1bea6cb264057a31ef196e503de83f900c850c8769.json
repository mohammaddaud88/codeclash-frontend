{"ast":null,"code":"import { toast } from 'react-toastify';\nconst CodeExecutorService = {\n  async execute({\n    code,\n    language,\n    input,\n    problemId\n  }) {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/run`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code,\n          language,\n          input,\n          problemId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Code execution failed');\n      }\n      const result = await response.json();\n      return {\n        success: true,\n        output: result.output,\n        testCases: result.testCases || []\n      };\n    } catch (error) {\n      console.error('Code execution error:', error);\n      toast.error('Failed to execute code');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  async submit({\n    code,\n    language,\n    problemId\n  }) {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/submissions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code,\n          language,\n          problemId\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        toast.success('Code submitted successfully!');\n        return {\n          success: true,\n          data: result\n        };\n      } else {\n        toast.error(result.message || 'Submission failed');\n        return {\n          success: false,\n          error: result.message\n        };\n      }\n    } catch (error) {\n      console.error('Submission error:', error);\n      toast.error('Error submitting code');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\nexport default CodeExecutorService;","map":{"version":3,"names":["toast","CodeExecutorService","execute","code","language","input","problemId","token","localStorage","getItem","response","fetch","process","env","REACT_APP_BACKEND_URL","method","headers","body","JSON","stringify","ok","Error","result","json","success","output","testCases","error","console","message","submit","data"],"sources":["D:/React/CodeClash/codeclash-frontend/codeclash-frontend/src/services/CodeExecutorService.js"],"sourcesContent":["import { toast } from 'react-toastify';\n\nconst CodeExecutorService = {\n  async execute({ code, language, input, problemId }) {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/run`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code,\n          language,\n          input,\n          problemId\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Code execution failed');\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        output: result.output,\n        testCases: result.testCases || []\n      };\n    } catch (error) {\n      console.error('Code execution error:', error);\n      toast.error('Failed to execute code');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n\n  async submit({ code, language, problemId }) {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/submissions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code,\n          language,\n          problemId\n        })\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        toast.success('Code submitted successfully!');\n        return {\n          success: true,\n          data: result\n        };\n      } else {\n        toast.error(result.message || 'Submission failed');\n        return {\n          success: false,\n          error: result.message\n        };\n      }\n    } catch (error) {\n      console.error('Submission error:', error);\n      toast.error('Error submitting code');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\n\nexport default CodeExecutorService;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,mBAAmB,GAAG;EAC1B,MAAMC,OAAOA,CAAC;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAU,CAAC,EAAE;IAClD,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,MAAM,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUT,KAAK;QAClC,CAAC;QACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBhB,IAAI;UACJC,QAAQ;UACRC,KAAK;UACLC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMC,MAAM,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MACpC,OAAO;QACLC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAEH,MAAM,CAACG,MAAM;QACrBC,SAAS,EAAEJ,MAAM,CAACI,SAAS,IAAI;MACjC,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C3B,KAAK,CAAC2B,KAAK,CAAC,wBAAwB,CAAC;MACrC,OAAO;QACLH,OAAO,EAAE,KAAK;QACdG,KAAK,EAAEA,KAAK,CAACE;MACf,CAAC;IACH;EACF,CAAC;EAED,MAAMC,MAAMA,CAAC;IAAE3B,IAAI;IAAEC,QAAQ;IAAEE;EAAU,CAAC,EAAE;IAC1C,IAAI;MACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,cAAc,EAAE;QAC/EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUT,KAAK;QAClC,CAAC;QACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBhB,IAAI;UACJC,QAAQ;UACRE;QACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAMgB,MAAM,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAEpC,IAAID,MAAM,CAACE,OAAO,EAAE;QAClBxB,KAAK,CAACwB,OAAO,CAAC,8BAA8B,CAAC;QAC7C,OAAO;UACLA,OAAO,EAAE,IAAI;UACbO,IAAI,EAAET;QACR,CAAC;MACH,CAAC,MAAM;QACLtB,KAAK,CAAC2B,KAAK,CAACL,MAAM,CAACO,OAAO,IAAI,mBAAmB,CAAC;QAClD,OAAO;UACLL,OAAO,EAAE,KAAK;UACdG,KAAK,EAAEL,MAAM,CAACO;QAChB,CAAC;MACH;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC3B,KAAK,CAAC2B,KAAK,CAAC,uBAAuB,CAAC;MACpC,OAAO;QACLH,OAAO,EAAE,KAAK;QACdG,KAAK,EAAEA,KAAK,CAACE;MACf,CAAC;IACH;EACF;AACF,CAAC;AAED,eAAe5B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}